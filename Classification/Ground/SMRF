import tkinter as tk
from tkinter import filedialog, messagebox
import pdal
import json
import threading

class GroundClassificationSMRF:
    def __init__(self, master):
        self.master = master
        master.title("Ground Classification (SMRF)")

        config = [
            ("Input File:", self.select_input_file, None),
            ("Output File:", self.select_output_file, None),
            ("Slope:", None, "0.2"),
            ("Window:", None, "16.0"),
            ("Threshold:", None, "0.45"),
            ("Scalar:", None, "1.25")
        ]

        self.entries = {}
        for idx, (label, action, default_val) in enumerate(config):
            tk.Label(master, text=label).grid(row=idx, column=0, sticky="w")
            entry = tk.Entry(master, width=50 if action else 10)
            entry.grid(row=idx, column=1)
            if default_val:
                entry.insert(0, default_val)
            if action:
                tk.Button(master, text="Browse...", command=action).grid(row=idx, column=2)
            self.entries[label[:-1].lower().replace(" ", "_")] = entry

        self.unclassified_only = tk.BooleanVar()
        tk.Checkbutton(master, text="Only run on Classification = 1", variable=self.unclassified_only).grid(row=idx+1, column=0, columnspan=3)

        tk.Button(master, text="Run SMRF Ground Classification", command=self.run_classification).grid(row=idx+2, column=0, columnspan=3, pady=10)

        self.status_label = tk.Label(master, text="", fg="blue")
        self.status_label.grid(row=idx+3, column=0, columnspan=3)

    def select_input_file(self):
        filename = filedialog.askopenfilename(filetypes=[("LAS/LAZ files", "*.las *.laz")])
        self.entries["input_file"].delete(0, tk.END)
        self.entries["input_file"].insert(0, filename)

    def select_output_file(self):
        filename = filedialog.asksaveasfilename(defaultextension=".laz")
        self.entries["output_file"].delete(0, tk.END)
        self.entries["output_file"].insert(0, filename)

    def run_classification(self):
        def classify():
            input_file = self.entries["input_file"].get()
            output_file = self.entries["output_file"].get()
            slope = float(self.entries["slope"].get())
            window = float(self.entries["window"].get())
            threshold = float(self.entries["threshold"].get())
            scalar = float(self.entries["scalar"].get())

            smrf = {
                "type": "filters.smrf",
                "slope": slope,
                "window": window,
                "threshold": threshold,
                "scalar": scalar
            }
            if self.unclassified_only.get():
                smrf["ignore"] = "Classification![1:1]"

            pipeline_json = {
                "pipeline": [
                    {"type": "readers.las", "filename": input_file},
                    smrf,
                    {"type": "writers.las", "filename": output_file}
                ]
            }

            try:
                pdal.Pipeline(json.dumps(pipeline_json)).execute()
                self.master.after(0, self.status_label.config, {"text": "Done!"})
                messagebox.showinfo("Success", "Ground classification with SMRF completed.")
            except RuntimeError as e:
                self.master.after(0, self.status_label.config, {"text": ""})
                messagebox.showerror("Error", f"PDAL failed:\n{e}")

        self.status_label.config(text="Working...")
        threading.Thread(target=classify, daemon=True).start()


if __name__ == "__main__":
    root = tk.Tk()
    app = GroundClassificationSMRF(root)
    root.mainloop()
