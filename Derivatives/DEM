import tkinter as tk
from tkinter import filedialog, messagebox
import pdal
import json
import threading

class DEMGeneratorGUI:
    def __init__(self, master):
        self.master = master
        master.title("DEM Generator")

       
        self.entries = {}
        config = [
            ("Input LAS File:", self.select_input_file, None),
            ("Output DEM File:", self.select_output_file, None),
            ("Resolution:", None, "1.0")  # Default resolution for DEM
        ]

        for idx, (label, action, default_val) in enumerate(config):
            tk.Label(master, text=label).grid(row=idx, column=0, sticky="w")
            entry = tk.Entry(master, width=50 if action else 10)
            entry.grid(row=idx, column=1)
            if default_val is not None:
                entry.insert(0, default_val)
            if action:
                tk.Button(master, text="Browse...", command=action).grid(row=idx, column=2)
            self.entries[label[:-1].lower().replace(" ", "_")] = entry
        
        tk.Button(master, text="Generate DEM", command=self.generate_dem).grid(row=len(config), column=0, columnspan=3)

    def select_input_file(self):
        filename = filedialog.askopenfilename(title="Select LAS file", filetypes=(("LAS files", "*.las"), ("All files", "*.*")))
        if filename:
            self.entries['input_las_file'].delete(0, tk.END)
            self.entries['input_las_file'].insert(0, filename)

    def select_output_file(self):
        filename = filedialog.asksaveasfilename(title="Select output DEM file", filetypes=(("TIFF files", "*.tif"), ("All files", "*.*")), defaultextension=".tif")
        if filename:
            self.entries['output_dem_file'].delete(0, tk.END)
            self.entries['output_dem_file'].insert(0, filename)

    def generate_dem(self):
        threading.Thread(target=self._run_dem_pipeline).start()

    def _run_dem_pipeline(self):
        input_file = self.entries['input_las_file'].get()
        output_file = self.entries['output_dem_file'].get()
        resolution = float(self.entries['resolution'].get())
        
        pipeline_json = {
            "pipeline": [
                {"type": "readers.las", "filename": input_file},
                {"type": "filters.range", "limits": "Classification[2:2]"},  
                {"type": "writers.gdal", "filename": output_file, "output_type": "idw", "resolution": resolution}
            ]
        }

        pipeline = pdal.Pipeline(json.dumps(pipeline_json))
        try:
            pipeline.execute()
            messagebox.showinfo("Success", "DEM generated successfully!")
        except RuntimeError as e:
            messagebox.showerror("Error", f"An error occurred: {e}")

root = tk.Tk()
app = DEMGeneratorGUI(root)
root.mainloop()
